services:
  # PostgreSQL Database
  db:
    image: postgres:17.4
    container_name: work-hours-db-toshiba
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: workhours
#    ports:
#      - "127.0.0.1:5432:5432"
    volumes:
      - /home/ville/work_postgres_data:/var/lib/postgresql/data
      - ./database/tables.sql:/docker-entrypoint-initdb.d/01-tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d workhours"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: work-hours-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: workhours
      DB_PORT: 5432
      PORT: 3001
    ports:
      - "127.0.0.1:3001:3001"

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: work-hours-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "20080:80"
      - "20443:443"
